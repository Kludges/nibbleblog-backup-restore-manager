<?php

// =====================================================================
// PLUGIN INFO
// =====================================================================
$_PLUGIN_CONFIG['DATA'] = array(
   'author'=>'schlumpfuk',
   'version'=>'1.0.4',
   'url'=>'http://churchill.ddns.me.uk/pages/nibbleblog/'
);

// =====================================================================
// PLUGIN CLASS
// =====================================================================
class PLUGIN_BACKUP extends Plugin
{
   // Create backup directory if not exists
   public function create_dataPath()
   {
      $dataPath = PATH_ROOT. 'backups/';

      if(!is_dir($dataPath) && (!@mkdir($dataPath) || !@chmod($dataPath, 0777)));

      if (!file_exists($dataPath, 'index.html')) {
         $f = fopen($dataPath. 'index.html', 'a+');
         fwrite($f, '');
         fclose($f);
      }

   }

   // get FULLPATH of url
   public function full_path()
   {
      $s = &$_SERVER;
      $ssl = (!empty($s['HTTPS']) && $s['HTTPS'] == 'on') ? true:false;
      $sp = strtolower($s['SERVER_PROTOCOL']);
      $protocol = substr($sp, 0, strpos($sp, '/')) . (($ssl) ? 's' : '');
      $port = $s['SERVER_PORT'];
      $port = ((!$ssl && $port=='80') || ($ssl && $port=='443')) ? '' : ':' .$port;
      $host = isset($s['HTTP_X_FORWARDED_HOST']) ? $s['HTTP_X_FORWARDED_HOST'] : (isset($s['HTTP_HOST']) ? $s['HTTP_HOST'] : null);
      $host = isset($host) ? $host : $s['SERVER_NAME'] . $port;
      $uri = $protocol . '://' . $host . $s['REQUEST_URI'];
      $segments = explode('?', $uri, 1);
      $url = $segments[0];

      return $url;      
   }

   // Archive Content Folder
   public function zipData($source, $destination)
   {
      global $Language;
      $archiveName = 'backup-' .time() .'.zip';

      if (extension_loaded('zip')) {
         if (file_exists($source)) {
            $zip = new ZipArchive();
            if ($zip->open($destination, ZIPARCHIVE::CREATE)) {
               $source = realpath($source);
               if (is_dir($source)) {
                  $iterator = new RecursiveDirectoryIterator($source);

                  // skip dot files while iterating
                  $iterator->setFlags(RecursiveDirectoryIterator::SKIP_DOTS);
                  $files = new RecursiveIteratorIterator($iterator, RecursiveIteratorIterator::SELF_FIRST);
                  foreach ($files as $file) {
                     $file = realpath($file);
                     if (is_dir($file)) {
                        $zip->addEmptyDir(str_replace($source . '/', '', $file . '/'));
                     } else if (is_file($file)) {
                        $zip->addFromString(str_replace($source . '/', '', $file), file_get_contents($file));
                     }
                  }
               } else if (is_file($source)) {
                  $zip->addFromString(basename($source), file_get_contents($source));
               }
            }
            if (!$zip->close()) {
               Session::set_alert($Language->get("BACKUP_FAILED"));
               Redirect::controller('admin', 'plugins', 'config', array('plugin'=>'backup'));
            } else {
               Session::set_alert($Language->get("BACKUP_SUCCESSFUL"));
               Redirect::controller('admin', 'plugins', 'config', array('plugin'=>'backup'));
            }
            // close the zip file
            $zip->close();
         }
      }
      return false;
   }

   public function list_zipfiles($dataPath)
   {
      global $settings;
      global $Language;

      $html = '<table>
   <thead>
      <tr>
         <th>' .$Language->get("ARCHIVES"). '</th>
         <th>' .$Language->get("FILESIZE"). '</th>
         <th>' .$Language->get("DATE"). '</th>
         <th>' .$Language->get("ACTIONS"). '</th>
      </tr>
   </thead>
   <tbody>';

      $dircontents = scandir($dataPath);

      // list contents of directory
      foreach($dircontents as $file) {
         $extension = pathinfo($file, PATHINFO_EXTENSION);
         $filesize = $this->getFilesize($dataPath.$file);
         $date = filemtime($dataPath.$file);
         clearstatcache();

         if ($extension == 'zip') {
            $html .= '      <tr>';
            $html .= '         <td><strong>'. $file .'</strong></td>';
            $html .=          '<td>'. $filesize .'</td>';
            $html .=          '<td><em>'. date('F d Y h:i A', $date) .'</em></td>';
            $html .= '<td><span>';                                        

            // download
            $html .= Html::link(array('href'=>$dataPath.$file, 'content'=>$Language->get("DOWNLOAD")));

            // restore
            $html .= '<br /><button name="restore" value="'.$dataPath.$file.'" onclick="if(!confirm(\'' .$Language->get("RESTORE_BACKUP"). '\')) return false;">'. $Language->get("RESTORE") .'</button>';

            // delete
            $html .= '<button name="delete" value="'.$dataPath.$file.'" onclick="if(!confirm(\'' .$Language->get("DELETE_BACKUP"). '\')) return false;">'. $Language->get("DELETE") .'</button>';

            $html .= '</span></td>';
            $html .= '      </tr>';
         }
      }

      $html .= '   </tbody>
</table>';

      /* Actions */

      return $html;
   }
   
   // Recursively deletes a directory
   public function removeDir($dir)
   {
      if ($handle = opendir($dir)){
         $array = array();
         while (false !== ($file = readdir($handle))) {
            if ($file != "." && $file != "..") {

               if(is_dir($dir.$file))
               {
                  if(!@rmdir($dir.$file)) // Empty directory? Remove it
                  {
                     $this->removeDir($dir.$file. '/'); // Not empty? Delete the files inside it
                  }
               } else {
                  @unlink($dir.$file);
               }
            }
         }
         closedir($handle);
         @rmdir($dir);
      }
   }


   // Delete a File
   public function del($file)
   {
      global $Language;
      $serveur = $this->full_path(); // redirection

      if(file_exists($file)) unlink($file);

      if($file){
         Session::set_alert($Language->get("DELETE_SUCCESSFUL"));
         Redirect::controller('admin', 'plugins', 'config', array('plugin'=>'backup'));
      } else {
         Session::set_alert($Language->get("DELETE_FAILED"));
         Redirect::controller('admin', 'plugins', 'config', array('plugin'=>'backup'));
      }
   }

   // Restore an archive
   public function restore($file)
   {
      global $Language;

      // get the absolute path to $file
      $path = PATH_CONTENT;
      $serveur = $this->full_path(); // redirection

      $zip = new ZipArchive;
      $res = $zip->open($file);
      $removeDir = $this->removeDir($path);
      if ($res === TRUE) {
         $removeDir;
         if(!is_dir($path) && (!@mkdir($path) || !@chmod($path, 0777)));

         // extract it to the path we determined above
         $zip->extractTo($path);
         $zip->close();
         Session::set_alert($Language->get("RESTORE_SUCCESSFUL"));
         Redirect::controller('admin', 'plugins', 'config', array('plugin'=>'backup'));
      } else {
         Session::set_alert($Language->get("RESTORE_FAILED"));
         Redirect::controller('admin', 'plugins', 'config', array('plugin'=>'backup'));
      }
   }

   // get FILESIZE
   public function getFilesize($file,$digits = 2)
   {
      if (is_file($file)) {
         $filePath = $file;
         if (!realpath($filePath)) {
            $filePath = $_SERVER["DOCUMENT_ROOT"].$filePath;
         }
         $fileSize = filesize($filePath);
         $sizes = array("TB","GB","MB","KB","B");
         $total = count($sizes);
         while ($total-- && $fileSize > 1024) {
            $fileSize /= 1024;
         }
         return round($fileSize, $digits)." ".$sizes[$total];
      }
      return false;
   }

   public function dashboard_config()
   {
      global $Language;

      $dataPath = PATH_ROOT. 'backups/';
      $archiveName = 'backup-'. time() .'.zip';
      $html = '';

      // if dataPath not exists create it
      if(!is_dir($dataPath)) $this->create_dataPath();

      // List contents of backup directory
      if(file_exists($dataPath)) $html .= $this->list_zipfiles($dataPath);


      $html .= '   <button name="backup">'. $Language->get("BACKUP_CREATE") .'</button>';

      /* Actions */
      if(isset($_POST['backup'])) { $this->zipData(PATH_CONTENT, $dataPath.$archiveName); }
      if(isset($_POST['delete'])) { $this->del($_POST['delete']); }
      if(isset($_POST['restore'])) { $this->restore($_POST['restore']); }

      return $html;
   }

}
?>
